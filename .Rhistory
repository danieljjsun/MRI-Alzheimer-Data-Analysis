data <- read.csv("oasis_longitudinal.csv")
# 373 observations
glimpse(data)
new_data <- data %>%
filter(!is.na(`Subject.ID`) & !is.na(`MRI.ID`) & !is.na(`Group`) &
!is.na(`Visit`) & !is.na(`MR.Delay`) & !is.na(`M.F`) &
!is.na(`Hand`) & !is.na(`Age`) & !is.na(`EDUC`) &
!is.na(`SES`) & !is.na(`MMSE`) & !is.na(`CDR`) &
!is.na(`eTIV`) & !is.na(`nWBV`) & !is.na(`ASF`)) %>%
group_by(Subject.ID)
# 354 observations
nrow(new_data)
#column name m.f isn't as visually aesthetic
colnames(new_data)[6] <-"Sex"
set.seed(100)
trainIndex <- sample(1:nrow(new_data), 0.8 * nrow(new_data))
trainData <- new_data[trainIndex, ]
testData <- new_data[-trainIndex, ]
setwd("C:/Data Analytics/MRI Alzheimer's/")
library(tidyverse)
data <- read.csv("oasis_longitudinal.csv")
# 373 observations
glimpse(data)
new_data <- data %>%
filter(!is.na(`Subject.ID`) & !is.na(`MRI.ID`) & !is.na(`Group`) &
!is.na(`Visit`) & !is.na(`MR.Delay`) & !is.na(`M.F`) &
!is.na(`Hand`) & !is.na(`Age`) & !is.na(`EDUC`) &
!is.na(`SES`) & !is.na(`MMSE`) & !is.na(`CDR`) &
!is.na(`eTIV`) & !is.na(`nWBV`) & !is.na(`ASF`)) %>%
group_by(Subject.ID)
# 354 observations
nrow(new_data)
#column name m.f isn't as visually aesthetic
colnames(new_data)[6] <-"Sex"
set.seed(1)
trainIndex <- sample(1:nrow(new_data), 0.8 * nrow(new_data))
trainData <- new_data[trainIndex, ]
testData <- new_data[-trainIndex, ]
colnames(new_data)
model_one <- lm(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nwBV + ASF, data = trainData)
model_one <- lm(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
# 354 observations
nrow(new_data)
install.packages("ordinal")
librar(ordinal)
library(ordinal)
model_one <- clm(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
#response variable needs to be a factor for clm() to work
new_data$Group <- as.factor(new_data$Group)
model_one <- clm(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
class(new_data$Group)
model_one <- clm(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
trainIndex <- sample(1:nrow(new_data), 0.8 * nrow(new_data))
trainData <- new_data[trainIndex, ]
testData <- new_data[-trainIndex, ]
colnames(new_data)
model_one <- clm(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
install.packages("rpart")
library(rpart)
data <- read.csv("oasis_longitudinal.csv")
# 373 observations
glimpse(data)
new_data <- data %>%
filter(!is.na(`Subject.ID`) & !is.na(`MRI.ID`) & !is.na(`Group`) &
!is.na(`Visit`) & !is.na(`MR.Delay`) & !is.na(`M.F`) &
!is.na(`Hand`) & !is.na(`Age`) & !is.na(`EDUC`) &
!is.na(`SES`) & !is.na(`MMSE`) & !is.na(`CDR`) &
!is.na(`eTIV`) & !is.na(`nWBV`) & !is.na(`ASF`)) %>%
group_by(Subject.ID)
# 354 observations
nrow(new_data)
#column name m.f isn't as visually aesthetic
colnames(new_data)[6] <-"Sex"
set.seed(1)
trainIndex <- sample(1:nrow(new_data), 0.8 * nrow(new_data))
trainData <- new_data[trainIndex, ]
testData <- new_data[-trainIndex, ]
colnames(new_data)
#response variable needs to be a factor for clm() to work
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
plot(model_one)
text(model_one)
par(mar = c(5, 8, 4, 2))
plot(model_one)
text(model_one)
par(cex = 0.8)
par(cex = 0.8)
par(mar = c(5, 5, 4, 2))
plot(model_one)
text(model_one)
#response variable needs to be a factor for clm() to work
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
par(cex = 0.8)
par(mar = c(5, 5, 4, 2))
plot(model, uniform = TRUE, margin = 0.1, main = "Decision Tree")
text(model, use.n = TRUE, all = TRUE, cex = 0.8)
plot(model_one)
text(model_one)
par(cex = 1)
par(mar = c(5, 4, 4, 2))
#response variable needs to be a factor for clm() to work
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
plot(model_one)
text(model_one)
par(cex = 0.6)
plot(model_one)
text(model_one)
par(cex = 0.3)
plot(model_one)
text(model_one)
par(cex = 0.1)
plot(model_one)
text(model_one)
par(cex = 0.2)
plot(model_one)
text(model_one)
plot(model, uniform = TRUE, margin = 0.1)
text(model_one)
#response variable needs to be a factor for clm() to work
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
par(cex = 0.2)
plot(model_one, uniform = TRUE, margin = 0.1)
par(cex = 0.5)
plot(model_one, uniform = TRUE, margin = 0.1)
text(model_one)
predicted_response <- predict(model_one, newdata = testData)
accuracy <- sum(predicted_response == testData$Group) / nrow(testData)
accuracy
accuracy <- sum(predicted_response == testData$Group) / nrow(testData)
accuracy
var_importance <- varImp(model_one)
library(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
library(caret)
var_importance <- varImp(model_one)
print(var_importance)
model_two <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + eTIV + nWBV + ASF, data = trainData)
library(rpart)
library(tidyverse)
library(caret)
model_two <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_two, newdata = testData)
accuracy <- sum(predicted_response == testData$Group) / nrow(testData)
par(cex = 0.5)
plot(model_two, uniform = TRUE, margin = 0.1)
text(model_two)
View(model_one)
model_two <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_two, newdata = testData)
accuracy <- sum(predicted_response == testData$Group) / nrow(testData)
accuracy
predicted_response <- predict(model, newdata = test_data, type = "class")
predicted_response <- predict(model_two, newdata = test_data, type = "class")
predicted_response <- predict(model_two, newdata = testData, type = "class")
# Create a confusion matrix
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
#response variable needs to be a factor for clm() to work
#################################
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_one, newdata = testData, type = "class")
# Create a confusion matrix
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
###############################################
model_three <- rpart(Group ~  Sex + Age + EDUC + SES + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_three, newdata = testData, type = "class")
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
plot(model_two, uniform = TRUE, margin = 0.1)
text(model_two)
###############################################
model_three <- rpart(Group ~  Sex + Age + EDUC + SES + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_three, newdata = testData, type = "class")
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
plot(model_three, uniform = TRUE, margin = 0.1)
text(model_three)
##########################################
model_four <- rpart(Group ~ Age , data = trainData)
predicted_response <- predict(model_four, newdata = testData, type = "class")
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
plot(model_four, uniform = TRUE, margin = 0.1)
text(model_four)
##########################################
model_four <- rpart(Group ~ Age , data = trainData)
predicted_response <- predict(model_four, newdata = testData, type = "class")
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
text(model, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_four, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_four)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_one)
#response variable needs to be a factor for clm() to work
#################################
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_one, newdata = testData, type = "class")
# Create a confusion matrix
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_one)
var_importance <- varImp(model_one)
print(var_importance)
#response variable needs to be a factor for clm() to work
#################################
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_one, newdata = testData, type = "class")
# Create a confusion matrix
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
par(cex = 0.5)
text(model_four, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
plot(model_one)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
ext(model_one)
text(model, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
ystep = -0.1, add = TRUE)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
ystep = -0.1, add = TRUE)
#response variable needs to be a factor for clm() to work
#################################
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_one, newdata = testData, type = "class")
# Create a confusion matrix
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
plot(model_one)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
ystep = -0.1, add = TRUE)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
ystep = -0.05, add = TRUE)
#response variable needs to be a factor for clm() to work
#################################
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_one, newdata = testData, type = "class")
# Create a confusion matrix
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
plot(model_one)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
ystep = -0.05, add = TRUE)
#response variable needs to be a factor for clm() to work
#################################
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_one, newdata = testData, type = "class")
# Create a confusion matrix
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
plot(model_one)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
ystep = -0.5, add = TRUE)
#response variable needs to be a factor for clm() to work
#################################
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_one, newdata = testData, type = "class")
# Create a confusion matrix
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
plot(model_one)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
node_height <- par("usr")[4] - par("usr")[3]
ystep <- -0.03 * node_height
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
ystep = -0.5, add = TRUE)
#response variable needs to be a factor for clm() to work
#################################
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_one, newdata = testData, type = "class")
# Create a confusion matrix
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
plot(model_one)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
node_height <- par("usr")[4] - par("usr")[3]
ystep <- -0.03 * node_height
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
ystep = -0.5, add = TRUE)
#response variable needs to be a factor for clm() to work
#################################
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_one, newdata = testData, type = "class")
# Create a confusion matrix
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
plot(model_one)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
node_height <- par("usr")[4] - par("usr")[3]
ystep <- -0.03 * node_height
text(model, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
pos = 3, offset = 0.8, y = ystep, add = TRUE)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
pos = 3, offset = 0.8, y = ystep, add = TRUE)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
digits = 4,
pos = 3, offset = 0.8, y = ystep, add = TRUE)
text(model, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
# Calculate the vertical position for the detailed error labels
node_height <- diff(par("usr")[3:4])
ystep <- -0.05 * node_height
# Add detailed error values to the plot with adjusted vertical position
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
y = ystep, add = TRUE)
#response variable needs to be a factor for clm() to work
#################################
model_one <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + CDR + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_one, newdata = testData, type = "class")
# Create a confusion matrix
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
plot(model_one)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_one, labels = round(model$frame$dev, 2), cex = 0.8, pos = 4, offset = 0.8)
plot(model_one)
text(model_one, labels = round(model$frame$dev, 2), cex = 0.8, pos = 4, offset = 0.8)
text(model_one, labels = round(model$frame$dev, 2), cex = 0.8, pos = 4, offset = 0.8)
var_importance <- varImp(model_one)
text(model_one, labels = round(model$frame$dev, 2), cex = 0.8, pos = 4, offset = 0.8)
text(model_one, labels = round(model_one$frame$dev, 2), cex = 0.8, pos = 4, offset = 0.8)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
gini_impurity <- model$cptable[, "xerror"]
gini_impurity <- model_one$cptable[, "xerror"]
# Add Gini impurity labels to the plot
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
pos = 2, offset = 0.8, ystep = -0.1, labels = round(gini_impurity, 4), add = TRUE)
# Retrieve the Gini impurity values for each split
gini_impurity <- model_one$cptable[, "xerror"]
# Add Gini impurity labels to the plot
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
pos = 2, offset = 0.8, ystep = -0.1, labels = round(gini_impurity, 4), add = TRUE)
# Retrieve the Gini impurity values for each split
gini_impurity <- model_one$cptable[, "xerror"]
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, digits = 2)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 4,
pos = 4, offset = 0.8, ystep = -0.1, labels = round(gini_impurity, 4), add = TRUE)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA, digits = 4,
pos = 4, offset = 0.8, ystep = -0.1, labels = round(gini_impurity, 4), add = TRUE)
text(model_one, use.n = TRUE, all = TRUE, cex = 0.6, split = TRUE, xpd = NA, digits = 4,
pos = 4, offset = 0.8, ystep = -0.1, labels = round(gini_impurity, 4), add = TRUE)
text(model_two, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
##########################################################
model_two <- rpart(Group ~  Sex + Age + EDUC + SES + MMSE + eTIV + nWBV + ASF, data = trainData)
predicted_response <- predict(model_two, newdata = testData, type = "class")
# Create a confusion matrix
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
plot(model_two)
text(model_two, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
setwd("C:/Data Analytics/MRI Alzheimer's/")
install.packages("caret")
install.packages("caret")
library(rpart)
library(tidyverse)
library(caret)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
par(cex = 0.5)
plot(model_four)
text(model_four, use.n = TRUE, all = TRUE, cex = 0.8, split = TRUE, xpd = NA,
pretty = 0, varlen = 0, prettyline = FALSE, digits = 2)
text(model_four)
##########################################
model_four <- rpart(Group ~ Age , data = trainData)
predicted_response <- predict(model_four, newdata = testData, type = "class")
confusion <- table(predicted_response, testData$Group)
# Calculate accuracy
accuracy <- sum(diag(confusion)) / sum(confusion)
accuracy
######################################################
#heatmap
heatmap(new_data,
col = colorRampPalette(c("blue", "white", "red")),  # Set the color scheme
main = "Heat Map",                                  # Set the title
xlab = "Columns",                                   # Set the x-axis label
ylab = "Rows",                                      # Set the y-axis label
cex.main = 1.5,                                     # Set the title font size
cex.axis = 1.2,                                     # Set the axis label font size
cex.lab = 1.2,                                      # Set the axis tick label font size
key = TRUE)                                         # Show the color key
######################################################
#heatmap
data <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2)
heatmap(new_data,
col = colorRampPalette(c("blue", "white", "red")),  # Set the color scheme
main = "Heat Map",                                  # Set the title
xlab = "Columns",                                   # Set the x-axis label
ylab = "Rows",                                      # Set the y-axis label
cex.main = 1.5,                                     # Set the title font size
cex.axis = 1.2,                                     # Set the axis label font size
cex.lab = 1.2,                                      # Set the axis tick label font size
key = TRUE)                                         # Show the color key
heatmap(data,
col = colorRampPalette(c("blue", "white", "red")),  # Set the color scheme
main = "Heat Map",                                  # Set the title
xlab = "Columns",                                   # Set the x-axis label
ylab = "Rows",                                      # Set the y-axis label
cex.main = 1.5,                                     # Set the title font size
cex.axis = 1.2,                                     # Set the axis label font size
cex.lab = 1.2,                                      # Set the axis tick label font size
key = TRUE)                                         # Show the color key
heatmap(data,
col = colorRampPalette(c("blue", "white", "red")),  # Set the color scheme
main = "Heat Map",                                  # Set the title
xlab = "Columns",                                   # Set the x-axis label
ylab = "Rows",                                      # Set the y-axis label
cex.main = 1.5,                                     # Set the title font size
cex.axis = 1.2,                                     # Set the axis label font size
cex.lab = 1.2)                                         # Show the color key
heatmap(data,
col = colorRampPalette(c("blue", "white", "red")),  # Set the color scheme
main = "Heat Map",                                  # Set the title
xlab = "Columns",                                   # Set the x-axis label
ylab = "Rows",                                      # Set the y-axis label
cex.main = 1.5,                                     # Set the title font size
cex.axis = 1.2,                                     # Set the axis label font size
cex.lab = 1.2)                                         # Show the color key
